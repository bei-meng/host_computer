# 读[row_start_num,row_end_num][col_start_num,col_start_num]这块区域的值
# 默认会定义一个寄存器变量zero,值为0
    #---------------------------------------------------------------------------------------------------每个dout_ram能存的最大数据
    consti count_max_c, 512
    consti pq_c, 0

    #---------------------------------------------------------------------------------------------------要读的行bank号在din_ram存放的位置,以及右边界
    consti row_bank_din_ram_s_c, 0
    consti row_bank_din_ram_e_c, 1

    #---------------------------------------------------------------------------------------------------要读的行bank号在din_ram存放的位置,以及右边界
    consti col_bank_din_ram_s_c, 2
    consti col_bank_din_ram_e_c, 3

    #---------------------------------------------------------------------------------------------------每个行bank的起始index号和结束index号在din_ram存放的位置
    consti row_index_din_ram_s_c, 4
    consti row_index_din_ram_e_c, 6

    #---------------------------------------------------------------------------------------------------每个列bank的起始index号和结束index号在din_ram存放的位置
    consti col_index_din_ram_s_c, 8
    consti col_index_din_ram_e_c, 12
start:
    #---------------------------------------------------------------------------------------------------用于移位操作的寄存器数
    addi one, zero, 1                                                       # 寄存器里面存的1
    addi four, zero, 4                                                      # 寄存器里面存的2

    #---------------------------------------------------------------------------------------------------用于下面的dout_ram满了之后将数据上传
    addi count, zero, 0                                                     # 初始化计数器
    addi count_max, zero, count_max_c                                       # 设置计数器最大值

    #---------------------------------------------------------------------------------------------------存储当前是使用的哪一块dout_ram
    addi pq, zero,pq_c

    #---------------------------------------------------------------------------------------------------初始化取行bank地址的起始和结束边界
    # []左闭右闭, row_bank_addr 为起始边界, row_bank_end_addr 为结束边界
    addi row_bank_addr, zero, row_bank_din_ram_s_c                          # 初始化寄存器，存放din_ram中的第一个要读的行bank的bank号的addr
    addi row_bank_end_addr, zero, row_bank_din_ram_e_c                      # 初始化寄存器，存放din_ram中的第一个截止读的行bank的bank号的addr

    #---------------------------------------------------------------------------------------------------初始化取行index号地址的起始和结束边界
    addi row_index_start_addr, zero, row_index_din_ram_s_c                  # 初始化寄存器，存放din_ram中的第一个行bank起始读的行index的addr
    addi row_index_end_addr, zero, row_index_din_ram_e_c                    # 初始化寄存器，存放din_ram中的第一个行bank截止读的行index的addr

loop1:
    #---------------------------------------------------------------------------------------------------取行bank号, 生成行bank掩码, 
    #row_bank_addr 为计数器,会++, 直到结束边界
    load_din_ram    row_bank_num,row_bank_addr                              # 加载bank号
    sll     row_bank_mask, one, row_bank_num                                # row_bank_mask = one << row_bank_num

    #---------------------------------------------------------------------------------------------------初始化index号遍历的起始和结束边界
    # row_index_start_addr 和 row_index_end_addr 会++, row_index_num 为起始边界, row_end_index 为结束边界
    load_din_ram    row_index_num, row_index_start_addr                     # 将当前行bank的起始index号加载进来
    load_din_ram    row_end_index, row_index_end_addr                       # 将当前行bank的截止index号加载进来

loop2:
    #---------------------------------------------------------------------------------------------------取行index号, 生成行index掩码, 
    #row_index_num为计数器,会++
    sll row_index_mask, one, row_index_num                                  # 初始化行index的掩码, row_index_mask = one << row_index_num
    set_row_bank row_bank_mask, row_index_mask                              # 配置行bank

    #---------------------------------------------------------------------------------------------------初始化取列bank地址的起始和结束边界
    # []左闭右闭, col_bank_addr 为起始边界, col_bank_end_addr 为结束边界
    addi col_bank_addr, zero, col_bank_din_ram_s_c                          # 初始化寄存器，存放din_ram中的第一个要读的列bank的bank号的addr
    addi col_bank_end_addr, zero, col_bank_din_ram_e_c                      # 初始化寄存器，存放din_ram中的第一个截止读的列bank的bank号的addr

    #---------------------------------------------------------------------------------------------------初始化取列index号地址的起始和结束边界
    addi col_index_start_addr, zero, col_index_din_ram_s_c                  # 初始化寄存器，存放din_ram中的第一个列bank起始读的列index的addr
    addi col_index_end_addr, zero, col_index_din_ram_e_c                    # 初始化寄存器，存放din_ram中的第一个列bank截止读的列index的addr

loop3:
    #---------------------------------------------------------------------------------------------------取列bank号, 生成列bank掩码, 
    #col_bank_addr为计数器,会++
    load_din_ram    col_bank_num,col_bank_addr                              # 加载bank号
    sll     col_bank_mask, one, col_bank_num                                # col_bank_mask = one << col_bank_num

    #---------------------------------------------------------------------------------------------------初始化index号遍历的起始和结束边界
    # col_index_start_addr 和 col_index_end_addr 会++
    load_din_ram    col_index_num, col_index_start_addr                     # 将当前行bank的起始row index加载进来
    load_din_ram    col_end_index, col_index_end_addr                       # 将当前行bank的截止row index加载进来

    #---------------------------------------------------------------------------------------------------计算tia的base
    bge col_bank_num, four, tia_big4                                        # 如果col_bank_num >= 4，跳转到tia_big4

tia_nobig4:
    add tia_base, col_bank_num, four                                        # tia_base = col_bank_count + 4
    jump tia_end

tia_big4:
    sub     tia_base, col_bank_num, four                                    # tia_base = col_bank_count - 4

tia_end:
    sll     tia_base, tia_base, one                                         # tia_base = tia_base * 2

loop4:
    #---------------------------------------------------------------------------------------------------取列index号, 生成列index掩码, 
    #col_index_num为计数器,会++,范围[0:31]
    sll col_index_mask, one, col_index_num                                  # col_index_mask = one << col_index_num
    set_col_bank col_bank_mask, col_index_mask                              # 配置列bank


    #---------------------------------------------------------------------------------------------------计算tia,并设置tia_mask
    srl tia_offset, col_index_num, four                                     # tmp_index = col_index_num / 16
    add tia_num, tia_base, tia_offset                                       # tia_num = tia_base + tia_offset
    sll tia_mask,one,tia_num                                                # tia_mask = one << tia_num

    read_row_tia tia_mask,count,pq
    #---------------------------------------------------------------------------------------------------控制返回的计数器, 计数已经操作了多少个点了
    addi    count, count, 1                                                 # count, count + 1
    bge     count, count_max, return_0                                      # 如果count >= count_max, 跳转到return_0
    jump   jump_return

return_0:
    return_dout count,zero ,pq
    xori    pq, pq, 1                                                       # pq, pq xor 1 
    addi    count, zero, 0                                                  # count, 0

jump_return:
    #---------------------------------------------------------------------------------------------------当前列bank里面的所有列都遍历完了,就跳出循环,否则下一列
    bge col_index_num, col_end_index, end4                                  # 如果col_index_num >= col_end_index，跳转到end4
    addi col_index_num, col_index_num, 1                                    # col_index_num = col_index_num + 1
    jump loop4

end4:
    #---------------------------------------------------------------------------------------------------把当前bank的所有latch清零
    set_col_bank col_bank_mask, zero
    #---------------------------------------------------------------------------------------------------当前所有列bank都遍历完了,就跳出循环,否则下一个bank
    bge col_bank_addr, col_bank_end_addr, end3                              # 如果col_bank_addr >= col_bank_end_addr，跳转到end3

    addi col_bank_addr, col_bank_addr, 1                                    # col_bank_addr = col_bank_addr + 1
    addi col_index_start_addr, col_index_start_addr, 1                      # 下一个列bank的起始读的列index的地址
    addi col_index_end_addr, col_index_end_addr, 1                          # 下一个列bank的截止读的列index的地址
    jump loop3

end3:
    #---------------------------------------------------------------------------------------------------当前行bank里面的所有行都遍历完了,就跳出循环,否则下一行
    bge row_index_num, row_end_index, end2                                  # 如果row_index_num >= row_end_index，跳转到end2
    addi row_index_num, row_index_num, 1                                    # row_index_num, row_index_num + 1
    jump loop2

end2:
    #---------------------------------------------------------------------------------------------------把当前bank的所有latch清零
    set_row_bank row_bank_mask, zero
    #---------------------------------------------------------------------------------------------------当前所有行bank都遍历完了,就跳出循环,否则下一个行bank
    bge row_bank_addr, row_bank_end_addr, end1                              # 如果row_bank_addr >= row_bank_end_addr，跳转到end1

    addi row_bank_addr, row_bank_addr, 1                                    # row_bank_addr = row_bank_addr + 1
    addi row_index_start_addr, row_index_start_addr, 1                      # 下一个行bank的起始读的行index的地址
    addi row_index_end_addr, row_index_end_addr, 1                          # 下一个行bank的截止读的行index的地址
    jump loop1

end1:
    #---------------------------------------------------------------------------------------------------有数据才返回
    bge count,one,return_1
    jump exit

return_1:
    return_dout count,zero ,pq

exit:
    exit              # 结束执行