# 注释使用:#
# 立即数只支持：16进制数格式0x10或者0X10, 10进制数格式10101,10进制数最高位不能为0
# 指令名称后面为i的表示对立即数或常量的操作

consti imm,0x1                                  # 注册常量imm, 值为10,指令中的立即数可以使用
consti imm0,0x3                                 # 注册常量imm0, 值为10,指令中的立即数可以使用
consti imm1,0x7                                 # 注册常量imm1, 值为10,指令中的立即数可以使用

addi reg0,zero,0x1
addi reg1,zero,0x3
addi reg2,zero,0x7



addi reg1,reg0,imm                              # reg1 = reg0 + imm
add reg2,reg1,reg0                              # reg2 = reg1 + reg0
sub reg2,reg1,reg0                              # reg2 = reg1 - reg0
xori reg1,reg0,imm                              # reg1 = reg0 ^ imm
sll reg2,reg1,reg0                              # reg2 = reg1 << reg0
srl reg2,reg1,reg0                              # reg2 = reg1 >> reg0
bge reg1,reg0,label                             # if reg1 >= reg0 就跳转到对应标签处


jump label                                      # 跳转到对应标签处
exit:
    exit                                        # 结束指令
label:

load_din_ram reg1,reg0                          # 从din_ram取数据, reg1 = din_ram[reg0]
set_row_bank reg1,reg0                          # 配置行bank, reg1 为row_bank_mask, reg0 为row_index_mask
set_col_bank reg1,reg0                          # 配置列bank, reg1 为col_bank_mask, reg0 为col_index_mask
read_row_tia reg2,reg1,reg0                     # 从行读,reg2 为tia的掩码, reg1 为结果存储的dout_ram地址, reg0 为哪一块dout_ram(每个数据单元16bit)
read_col_tia reg2,reg1,reg0                     # 从列读,reg2 为tia的掩码, reg1 为结果存储的dout_ram地址, reg0 为哪一块dout_ram(每个数据单元16bit)
return_dout reg2,reg1,reg0                      # 数据返回上位机,reg2 为要返回的数据长度,reg1 为dout_ram读取的起始地址,reg0 为哪一块dout_ram(每个数据单元16bit)


#set_daci imm1,imm0                              # 设置dac的第imm1[0:11]个通道的电压码值(16bit)为imm0
#set_row_banki imm1,imm0                         # 从din_ram配置行bank,imm1为row_bank_mask(8bit),din_ram[imm0]里面是row_index_mask(32bit)
#set_col_banki imm1,imm0                         # 从din_ram配置列bank,imm1为col_bank_mask(8bit),din_ram[imm0]里面是col_index_mask(32bit)
#read_rowi imm                                   # 从行读16路TIA,结果存储在dout_ram[imm](每个数据单元256bit)
#read_coli imm                                   # 从列读16路TIA,结果存储在dout_ram[imm](每个数据单元256bit)
#write_row                                       # 从行写,产生row写pulse, 同时row ctrl置1
#write_col                                       # 从列写,产生col写pulse, 同时col ctrl置1
#cim_reset                                       # 清零latch

jump exit                                       # 跳转到对应标签处
